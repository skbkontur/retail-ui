// @flow
import * as React from 'react';

export type InputSize = 'small' | 'medium' | 'large';

export type InputAlign = 'left' | 'center' | 'right';

export type InputType = 'password' | 'text';

export type InputProps = {
  align?: InputAlign,
  alwaysShowMask?: boolean,
  autoFocus?: boolean,
  borderless?: boolean,
  className?: string,
  disabled?: boolean,
  error?: boolean,
  id?: string,
  leftIcon?: React.Node,
  mask?: string,
  maskChar?: string | null,
  maxLength?: number | string,
  placeholder?: string,
  rightIcon?: React.Node,
  size?: InputSize,
  title?: string,
  type?: InputType,
  value?: string,
  warning?: boolean,
  width?: number | string,
  onBlur?: (e: SyntheticFocusEvent<HTMLInputElement>) => void,
  onClick?: (e: SyntheticMouseEvent<HTMLInputElement>) => void,
  onDoubleClick?: (e: SyntheticMouseEvent<HTMLInputElement>) => void,
  onMouseUp?: (e: SyntheticMouseEvent<HTMLInputElement>) => void,
  onMouseDown?: (e: SyntheticMouseEvent<HTMLInputElement>) => void,
  onChange?: (e: SyntheticInputEvent<HTMLInputElement>, v: string) => void,
  onCopy?: (e: SyntheticClipboardEvent<HTMLInputElement>) => void,
  onCut?: (e: SyntheticClipboardEvent<HTMLInputElement>) => void,
  onFocus?: (e: SyntheticFocusEvent<HTMLInputElement>) => void,
  onInput?: (e: SyntheticInputEvent<HTMLInputElement>) => void,
  onKeyDown?: (e: SyntheticKeyboardEvent<HTMLInputElement>) => void,
  onKeyPress?: (e: SyntheticKeyboardEvent<HTMLInputElement>) => void,
  onKeyUp?: (e: SyntheticKeyboardEvent<HTMLInputElement>) => void,
  onPaste?: (e: SyntheticClipboardEvent<HTMLInputElement>) => void,
  onMouseEnter?: (e: SyntheticMouseEvent<HTMLInputElement>) => void,
  onMouseLeave?: (e: SyntheticMouseEvent<HTMLInputElement>) => void,
  onMouseOver?: (e: SyntheticMouseEvent<HTMLInputElement>) => void
};

export type InputState = {
  polyfillPlaceholder: boolean
};

export default class Input extends React.Component<InputProps, InputState> {
  focus(): void {}
  blur(): void {}
  blink(): void {}
  setSelectionRange(start: number, end: number): void {}
}
