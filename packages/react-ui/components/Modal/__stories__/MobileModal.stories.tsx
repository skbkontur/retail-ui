import React, { useState } from 'react';

import { Story } from '../../../typings/stories';
import { Modal, MobileModalAppearance } from '../Modal';
import { Button } from '../../Button';
import { ResponsiveLayout } from '../../ResponsiveLayout';
import { Checkbox } from '../../Checkbox';
import { MiniModal } from '../../MiniModal';
import { RadioGroup } from '../../RadioGroup';
import { Gapped } from '../../Gapped';

interface SuperModalProps {
  isOpened?: boolean;
  isMini?: boolean;
  appearance?: MobileModalAppearance | undefined;
  hasHeader?: boolean;
  stickyHeader?: boolean;
  hasFooter?: boolean;
  stickyFooter?: boolean;
  isLongContent?: boolean;
}

interface ModalWithVariableHeightState {
  isOpened: boolean;
}
class MobileModalWithSettings extends React.Component<SuperModalProps> {
  public state: ModalWithVariableHeightState = {
    isOpened: !!this.props.isOpened,
  };

  public render() {
    const { isMini, appearance, hasHeader, stickyHeader, hasFooter, stickyFooter, isLongContent } = this.props;
    const header = <Modal.Header sticky={stickyHeader}>Title</Modal.Header>;
    const footer = (
      <ResponsiveLayout>
        {({ isMobile }) => {
          return (
            <Modal.Footer sticky={stickyFooter}>
              <Button style={isMobile ? { width: '100%' } : undefined}>i'm first button</Button>
              <Button style={isMobile ? { width: '100%' } : undefined}>i'm second button</Button>
            </Modal.Footer>
          );
        }}
      </ResponsiveLayout>
    );

    const body = isLongContent ? (
      <Modal.Body>
        <div>
          * –ù–∞–≤–∏–≥–∞—Ü–∏—è ‚Äì –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ—Ä—Ö–Ω–µ–µ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º.
          <br />
          * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ ‚Äì –ø—Ä–∏–º–µ–Ω—è–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. <br />
          * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äì –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã, –∏–∑–º–µ–Ω—è—è —Ç–µ–º—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. <br />
          ‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã: <br />
          üîπ –ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è? ‚Äì –ü–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –ø—Ä–∞–≤–æ–∫ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤—è—Ç—Å—è
          –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. <br />
          üîπ –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ? ‚Äì –î–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ–Ω–∞¬ª –∏–ª–∏ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à Ctrl + Z (–¥–ª—è –ü–ö).{' '}
          <br />
          üîó –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã: –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ: <br />
          * –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–º–æ—â—å¬ª). <br />
          * –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ —á–∞—Ç –∏–ª–∏ –ø–æ email. <br />* –ü–æ—Å–µ—Ç–∏—Ç—å —Ñ–æ—Ä—É–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –≥–¥–µ
          –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–µ–ª—è—Ç—Å—è —Å–æ–≤–µ—Ç–∞–º–∏ –∏ —Ä–µ—à–µ–Ω–∏—è–º–∏. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º! üöÄ
          <div style={{ height: '700px', backgroundColor: 'aquamarine' }}></div>
        </div>
      </Modal.Body>
    ) : (
      <Modal.Body>
        –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∞–π—Ç–±–æ–∫—Å–µ, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π, —á—Ç–æ–±—ã –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫. –ï—Å–ª–∏ –≤ –ª–∞–π—Ç–±–æ–∫—Å–µ —Ç–æ–ª—å–∫–æ —ç—Ç–æ
        —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤, —Ç–æ –ª–∞–π—Ç–±–æ–∫—Å –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –ø–ª–∞—à–∫–µ –∏ –º–æ–∂–µ—Ç –¥–∞–∂–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å
        –∫–Ω–æ–ø–æ–∫.
      </Modal.Body>
    );

    return (
      <>
        {this.state.isOpened && !isMini && (
          <Modal mobileAppearance={appearance} onClose={() => this.setState({ isOpened: false })}>
            {hasHeader && header}
            {body}
            {hasFooter && footer}
          </Modal>
        )}
        {this.state.isOpened && isMini && (
          <MiniModal mobileAppearance={appearance} onClose={() => this.setState({ opened: false })}>
            {hasHeader && header}
            {body}
            {hasFooter && footer}
          </MiniModal>
        )}

        <Button data-tid="open-modal" onClick={() => this.setState({ isOpened: true })}>
          –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
        </Button>
      </>
    );
  }
}

export default {
  title: 'Modal/Mobile',
  component: Modal,
  parameters: {
    viewport: { defaultViewport: 'iphone' },
    creevey: { skip: { 'only mobile': { in: /^(?!\b(chromeMobile)\b)/ } }, captureElement: null },
  },
};

export const MobileModalPlayground: Story = () => {
  const [opened, setOpened] = React.useState(false);
  const [position, setPosition] = useState<MobileModalAppearance | undefined>(undefined);

  const [hasHeader, setHasHeader] = React.useState(false);
  const [stickyHeader, setStickyHeader] = React.useState(false);

  const [hasFooter, setHasFooter] = React.useState(false);
  const [stickyFooter, setStickyFooter] = React.useState(false);

  const [isLongContent, setIsLongContent] = React.useState(false);

  return (
    <Gapped gap={16} vertical>
      {opened && (
        <MobileModalWithSettings
          appearance={position}
          hasHeader={hasHeader}
          stickyHeader={stickyHeader}
          hasFooter={hasFooter}
          stickyFooter={stickyFooter}
          isLongContent={isLongContent}
        />
      )}
      <div>
        <b>–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ mobileAppearance</b>
        <br />
        <br />
        <RadioGroup
          items={['auto', 'top', 'center', 'bottom', 'fullscreen-spacing', 'fullscreen']}
          onValueChange={setPosition}
        />
      </div>
      <div>
        <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>
        <br />
        <br />
        <Gapped vertical gap={0}>
          <Checkbox checked={hasHeader} onValueChange={setHasHeader} children={'–®–∞–ø–∫–∞'} />
          <Checkbox checked={hasFooter} onValueChange={setHasFooter} children={'–ü–æ–≤–∞–ª'} />
          <Checkbox checked={stickyHeader} onValueChange={setStickyHeader} children={'–ó–∞–ª–∏–ø–∞—é—à–∞—è —à–∞–ø–∫–∞'} />
          <Checkbox checked={stickyFooter} onValueChange={setStickyFooter} children={'–ó–∞–ª–∏–ø–∞—é—â–∏–π –ø–æ–¥–≤–∞–ª'} />
          <Checkbox
            checked={isLongContent}
            onValueChange={setIsLongContent}
            children={'–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–∫—Ä–æ–ª–ª–∞'}
          />
        </Gapped>
      </div>
      <Button onClick={() => setOpened(true)}>–û—Ç–∫—Ä—ã—Ç—å</Button>
    </Gapped>
  );
};
MobileModalPlayground.parameters = { creevey: { skip: true } };

export const MobileModalDefaultWithBodyOnly: Story = () => {
  return <MobileModalWithSettings isOpened />;
};
export const MobileModalDefaultWithHeader: Story = () => {
  return <MobileModalWithSettings hasHeader isOpened />;
};
export const MobileModalDefaultWithFooter: Story = () => {
  return <MobileModalWithSettings hasFooter isOpened />;
};
export const MobileModalDefaultWithHeaderAndFooterWithLongContent: Story = () => {
  return <MobileModalWithSettings hasHeader hasFooter isLongContent isOpened />;
};
export const MobileModalDefaultWithStickyHeaderAndStickyFooterWithLongContent: Story = () => {
  return <MobileModalWithSettings hasHeader stickyHeader hasFooter stickyFooter isLongContent isOpened />;
};

export const MobileModalAutoWithHeader: Story = () => {
  return <MobileModalWithSettings appearance={'auto'} hasHeader isOpened />;
};
export const MobileModalAutoWithFooter: Story = () => {
  return <MobileModalWithSettings appearance={'auto'} hasFooter isOpened />;
};

export const MobileModalTopWithBodyOnly: Story = () => {
  return <MobileModalWithSettings appearance={'top'} isOpened />;
};
export const MobileModalBottomWithHeader: Story = () => {
  return <MobileModalWithSettings appearance={'bottom'} hasHeader isOpened />;
};
export const MobileModalCenterWithFooter: Story = () => {
  return <MobileModalWithSettings appearance={'center'} hasFooter isOpened />;
};
export const MobileModalTopWithLongContent: Story = () => {
  return <MobileModalWithSettings appearance={'center'} isLongContent isOpened />;
};

export const MobileModalFullscreenSpacingWithBodyOnly: Story = () => {
  return <MobileModalWithSettings appearance={'fullscreen-spacing'} isOpened />;
};

export const MobileModalFullscreenWithBodyOnly: Story = () => {
  return <MobileModalWithSettings appearance={'fullscreen'} isOpened />;
};
export const MobileModalFullscreenWithHeaderAndFooter: Story = () => {
  return <MobileModalWithSettings appearance={'fullscreen'} hasHeader hasFooter isOpened />;
};
export const MobileModalFullscreenWithStickyHeaderAndStickyFooterWithLongContent: Story = () => {
  return (
    <MobileModalWithSettings
      appearance={'fullscreen'}
      hasHeader
      stickyHeader
      hasFooter
      stickyFooter
      isLongContent
      isOpened
    />
  );
};
