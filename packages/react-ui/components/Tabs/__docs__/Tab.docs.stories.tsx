/* eslint-disable jsx-a11y/anchor-has-content */
import React from 'react';
import { Tab, ThemeContext, ThemeFactory, Button, Tabs } from '@skbkontur/react-ui';

import { Meta, Story } from '../../../typings/stories';

export default {
  title: 'Display data/Tabs/Tab',
  component: Tab,
  parameters: { creevey: { skip: true } },
} as Meta;

/** –ò—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ `tabColorPrimary`, `tabColorSuccess`, `tabColorWarning` –∏ `tabColorError` –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ü–≤–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–µ—Ä—ë—Ç —Ü–≤–µ—Ç –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏. */
export const Example1: Story = () => {
  const getRandomColor = () => '#' + Math.random().toString(16).substr(-6);
  const updateColors = () => {
    return {
      tabColorPrimary: getRandomColor(),
      tabColorSuccess: getRandomColor(),
      tabColorWarning: getRandomColor(),
      tabColorError: getRandomColor(),
    };
  };

  const [activeBase, setActiveBase] = React.useState('error');
  const [activeRandom, setActiveRandom] = React.useState('error');
  const [colors, setColors] = React.useState(updateColors());

  return (
    <>
      <p style={{ fontSize: '17px' }}>C —Ü–≤–µ—Ç–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</p>
      <Tabs value={activeBase} onValueChange={setActiveBase}>
        <Tabs.Tab primary id="primary">
          Primary
        </Tabs.Tab>
        <Tabs.Tab success id="success">
          Success
        </Tabs.Tab>
        <Tabs.Tab warning id="warning">
          Warning
        </Tabs.Tab>
        <Tabs.Tab error id="error">
          Error
        </Tabs.Tab>
      </Tabs>

      <p style={{ fontSize: '17px' }}>–°–æ —Å–ª—É—á–∞–π–Ω—ã–º –æ—Å–Ω–æ–≤–Ω—ã–º —Ü–≤–µ—Ç–æ–º</p>
      <div
        style={{ display: 'inline-flex', flexDirection: 'column', justifyContent: 'space-between', height: '100px' }}
      >
        <ThemeContext.Consumer>
          {(theme) => {
            return (
              <ThemeContext.Provider value={ThemeFactory.create(colors, theme)}>
                <Tabs value={activeRandom} onValueChange={setActiveRandom}>
                  <Tabs.Tab primary id="primary">
                    Primary
                  </Tabs.Tab>
                  <Tabs.Tab success id="success">
                    Success
                  </Tabs.Tab>
                  <Tabs.Tab warning id="warning">
                    Warning
                  </Tabs.Tab>
                  <Tabs.Tab error id="error">
                    Error
                  </Tabs.Tab>
                </Tabs>
              </ThemeContext.Provider>
            );
          }}
        </ThemeContext.Consumer>
        <Button onClick={() => setColors(updateColors)}>–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä —Ü–≤–µ—Ç–æ–≤</Button>
      </div>
    </>
  );
};
Example1.storyName = '–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è';

/** –° –ø–æ–º–æ—â—å—é –ø—Ä–æ–ø–∞ `component` –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç `<Tab />`.
–ü—Ä–æ–ø –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å—Ç—Ä–æ–∫–∏. */
export const Example2: Story = () => {
  const [active, setActive] = React.useState('/fuji');

  const NavLink = (props) => <a {...props} />;

  return (
    <Tabs value={active} onValueChange={setActive}>
      {/** –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç **/}
      <Tabs.Tab component={(props) => <NavLink {...props} />} id="/fuji">
        üåã Fuji
      </Tabs.Tab>
      {/** –§—É–Ω–∫—Ü–∏—è **/}
      <Tabs.Tab component={(props) => <a {...props} />} id="/tahat">
        ‚õ∞ Tahat
      </Tabs.Tab>
      {/** –°—Ç—Ä–æ–∫–∞ **/}
      <Tabs.Tab component="a" id="/alps">
        üóª Alps
      </Tabs.Tab>
    </Tabs>
  );
};
Example2.storyName = '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Tab';
