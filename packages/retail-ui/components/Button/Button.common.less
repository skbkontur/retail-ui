@import '../variables.less';

.commonStyles() {
  .root {
    .reset-button();
    .reset-text();

    border: 0;
    color: @text-color-default;
    cursor: pointer;
    display: inline-block;
    text-align: center;
    margin: 0; /* Need for Safari. */
    outline: 0;
    overflow: visible; /* On IE it's hidden by default. */
    position: relative;
    width: 100%;
    background-size: contain;
    background-position: center;
    background-repeat: no-repeat;
    background-clip: border-box;

    &::-moz-focus-inner {
      border: 0;
      padding: 0;
    }

    &:active,
    &.active,
    &.checked {
      &:not(.link):not(.disabled) {
        .caption {
          transform: translateY(1px);
        }
      }
    }

    &::after {
      content: '';
      display: inline-block;
      vertical-align: baseline;
      width: 0;
    }

    .warning,
    .error {
      border-radius: inherit;
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
    }

    &:not(.link) .warning {
      box-shadow: 0 0 0 2px @border-color-warning;
    }

    &:not(.link) .error {
      box-shadow: 0 0 0 2px @border-color-error;
    }
  }

  .caption {
    position: relative;
    white-space: nowrap;
    display: inline-block;
    width: 100%;
  }

  .icon {
    display: inline-block;
    padding-right: 7px;
  }

  .sizeSmall {
    font-size: 14px;

    &:not(.link) {
      padding: @control-padding-y-small 15px;
      line-height: @control-line-height-small;

      :global(.rt-ie-any) & {
        line-height: normal;
        padding-top: @control-padding-y-small - 1;
        padding-bottom: @control-padding-y-small + 1;
      }
    }
  }

  .sizeMedium {
    font-size: 16px;

    &:not(.link) {
      padding: @control-padding-y-medium - 1 15px @control-padding-y-medium + 1;
      line-height: @control-line-height-medium;

      :global(.rt-ie-any) & {
        line-height: normal;
        padding-top: @control-padding-y-medium - 2;
        padding-bottom: @control-padding-y-medium + 2;
      }
    }
  }

  .DEPRECATED_sizeMedium {
    &:not(.link) {
      padding: @control-padding-y-medium 15px;
      line-height: @control-line-height-small;

      :global(.rt-ie-any) & {
        line-height: normal;
        padding-top: @control-padding-y-medium - 1;
        padding-bottom: @control-padding-y-medium + 1;
      }
    }
  }

  .sizeLarge {
    font-size: 16px;

    &:not(.link) {
      padding: @control-padding-y-large - 1 20px @control-padding-y-large + 1;
      line-height: @control-line-height-large;

      :global(.rt-ie-any) & {
        line-height: normal;
        padding-top: @control-padding-y-large - 2;
        padding-bottom: @control-padding-y-large + 2;
      }
    }
  }

  .buttonWithIcon {
    padding-right: 15px;
    padding-left: 15px;
  }

  .linkMixin(link, @link-color, @link-hover-color, @link-hover-color, @link-active-color);

  /*
   * common styles with
   * increased specificity
   */
  .wrap {
    box-sizing: border-box;
    display: inline-block;

    &_arrow {
      margin-right: 10px;

      &_left {
        margin-right: 0;
        margin-left: 10px;
      }
    }

    .root {
      &.disabled {
        background: @bg-disabled;
        color: #808080;
        cursor: default;
        pointer-events: none;
      }

      &.link {
        display: inline;
        padding: 0;
        margin: 0;
        background: none;
        border: none;
        box-shadow: none;
        line-height: inherit;

        .caption {
          display: inline;
        }

        .icon {
          padding-right: @linkIconPadding;
        }

        .warning,
        .error {
          left: -2px;
          right: -2px;
          bottom: -2px;
        }

        .error {
          background: @error-secondary;
        }
      }

      &.narrow {
        padding-left: 5px;
        padding-right: 5px;
      }

      &.noPadding {
        padding-left: 0;
        padding-right: 0;
      }

      &.noRightPadding {
        padding-right: 0;
      }
    }
  }

  .loading {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    border-radius: inherit;
    overflow: hidden;
  }

  .loading::before {
    content: '';
    height: 100%;
    position: absolute;
    opacity: 0.2;
    background: linear-gradient(-110deg, #ccc 30%, transparent 0, transparent 60%, #ccc 0);
    background-size: 30px 100%;
    top: 0;
    left: 0;
    right: -30px;

    :global {
      animation: btn_loading 1s linear infinite;
    }

    transform: rotateY(180deg) skewX(0deg) skewY(0deg);
  }
}

@keyframes btn_loading {
  0% {
    transform: translateX(0) rotateY(180deg);
  }

  100% {
    transform: translateX(-30px) rotateY(180deg);
  }
}

@keyframes btn_loading_arrow {
  0% {
    transform: translateX(50px) rotate(-44.3deg) skewX(0deg) skewY(0deg);
  }

  100% {
    transform: translateX(21px) translateY(30px) rotate(-44.3deg) skewX(0deg) skewY(0deg);
  }
}

.buttonSizeMixin(
@className,
@length,
@top,
@right,
@left,
@shift,
@transform,
@arrow_loading,
@arrow_loading_top,
@arrow_left_loading_top,
@arrow_left_loading_left,
@arrow_loading_height
) {
  .@{className} {
    .arrow {
      position: absolute;
      top: @top;
      right: @right;
      height: @length;
      width: @length;
      transform: @transform;
      border-radius: 2px 2px 2px 16px;
      box-sizing: border-box;
      z-index: 1;
    }

    .arrow_left {
      left: @left;
      transform: rotate(232deg) skewX(25deg) skewY(8deg);
    }

    .arrow.arrow_loading {
      overflow: hidden;

      &::before {
        background: @arrow_loading;
        content: '';
        height: @arrow_loading_height;
        position: absolute;
        opacity: 0.2;
        background-size: 41px 100%;
        top: @arrow_loading_top;
        left: -207px;
        right: -72px;
        transform: rotate(-47deg) skewX(0deg) skewY(0deg);

        :global {
          animation: btn_loading_arrow 1s linear infinite;
        }
      }
    }

    .arrow_left.arrow_loading {
      &::before {
        :global {
          animation: btn_loading_arrow 1s linear infinite;
          animation-direction: reverse;
          left: @arrow_left_loading_left;
          top: @arrow_left_loading_top;
        }
      }
    }
  }
}

.buttonUseColorsMixin(
@className,
@btnBackground,
@arrowBackground,
@arrowLeftBackground,
@shadow,
@shadowArrow,
@shadowArrowLeft,
@color,
@border
) {
  .@{className} {
    background: @btnBackground;
    color: @color;
    box-shadow: @shadow;
    border: @border;

    .arrow {
      background: @arrowBackground;
      box-shadow: @shadowArrow;
    }

    .arrow_left {
      background: @arrowLeftBackground;
      box-shadow: @shadowArrowLeft;
    }

    .arrow.arrow_warning {
      box-shadow: 2px -2px 0 0 @border-color-warning;
    }

    .arrow.arrow_error {
      box-shadow: 2px -2px 0 0 @border-color-error;
    }
  }
}

.buttonUseHoverMixin(
@className,
@background,
@arrowBackground,
@arrowLeftBackground,
@shadow,
@arrowShadow,
@arrowLeftShadow,
@borderColor
) {
  .@{className} {
    &:hover {
      background: @background;
      box-shadow: @shadow;
      border-color: @borderColor;

      .arrow {
        background: @arrowBackground;
        box-shadow: @arrowShadow;
      }

      .arrow_left {
        background: @arrowLeftBackground;
        box-shadow: @arrowLeftShadow;
      }

      .arrow.arrow_warning {
        box-shadow: 2px -2px 0 0 @border-color-warning;
      }

      .arrow.arrow_error {
        box-shadow: 2px -2px 0 0 @border-color-error;
      }
    }
  }
}

.buttonUseActiveMixin(
@className,
@color,
@shadow,
@arrowShadow,
@arrowLeftShadow
) {
  .@{className} {
    &:active,
    &.active {
      background: @color;
      box-shadow: @shadow;

      .arrow {
        background: @color;
        box-shadow: @arrowShadow;
      }

      .arrow_left {
        box-shadow: @arrowLeftShadow;
      }

      .arrow.arrow_warning {
        box-shadow: 2px -2px 0 0 @border-color-warning;
      }

      .arrow.arrow_error {
        box-shadow: 2px -2px 0 0 @border-color-error;
      }
    }
  }
}

.buttonFocusMixin(
@shadowWidth,
@border,
@borderColor,
@focusInsetShadowColor
) {
  .root {
    &.focus {
      box-shadow: inset 0 0 0 1px @focusInsetShadowColor, 0 0 0 @shadowWidth @borderColor;
      position: relative;
      z-index: 2;
      border: @border;

      &.error,
      &.warning {
        box-shadow: inset 0 0 0 1px @focusInsetShadowColor;
        border-color: transparent;
      }

      .arrow {
        box-shadow: inset -1px 1px 0 0 @focusInsetShadowColor, 2px -2px 0 0 @borderColor;
      }

      .arrow.arrow_warning {
        box-shadow: inset -1px 1px 0 0 @focusInsetShadowColor, 2px -2px 0 0 @border-color-warning;
      }

      .arrow.arrow_error {
        box-shadow: inset -1px 1px 0 0 @focusInsetShadowColor, 2px -2px 0 0 @border-color-error;
      }
    }
  }
}

.buttonStateColorsMixin(
@checkedBackground,
@checkedBoxShadow,
@checkedArrowShadow,
@checkedArrowLeftShadow,
@hoverBorderColor,
@focusShadowWidth,
@disabledArrowBackground,
@disabledShadow,
@disabledArrowShadow,
@checkedColor,
@focusInsetShadowColor
) {
  .root.checked {
    background: @checkedBackground;
    box-shadow: @checkedBoxShadow;
    color: @checkedColor;

    .arrow {
      background: @checkedBackground;
      box-shadow: @checkedArrowShadow;
    }

    .arrow_left {
      background: @checkedBackground;
      box-shadow: @checkedArrowLeftShadow;
    }

    .arrow.arrow_error {
      box-shadow: inset 0 4px 2px -3px @btn-checked-shadow-color-arrow, 2px -2px 0 0 @border-color-error;
    }

    .arrow.arrow_warning {
      box-shadow: inset 0 4px 2px -3px @btn-checked-shadow-color-arrow, 2px -2px 0 0 @border-color-warning;
    }

    &:not(.focus):hover {
      background: @checkedBackground;
      border-color: @hoverBorderColor;
    }

    &.focus {
      box-shadow: inset 0 0 0 1px @focusInsetShadowColor, 0 0 0 @focusShadowWidth @border-color-focus;
      position: relative;
      z-index: 2;

      &.error,
      &.warning {
        box-shadow: inset 0 0 0 1px @focusInsetShadowColor;
        border-color: transparent;
      }

      .arrow {
        box-shadow: inset -1px 1px 0 0 @focusInsetShadowColor, 2px -2px 0 0 @border-color-focus;
      }

      .arrow.arrow_warning {
        box-shadow: inset -1px 1px 0 0 @focusInsetShadowColor, 2px -2px 0 0 @border-color-warning;
      }

      .arrow.arrow_error {
        box-shadow: inset -1px 1px 0 0 @focusInsetShadowColor, 2px -2px 0 0 @border-color-error;
      }
    }
  }

  .root.disabled {
    box-shadow: @disabledShadow;
    border-color: transparent;

    .arrow {
      background: @disabledArrowBackground;
      box-shadow: @disabledArrowShadow;
    }

    .arrow.arrow_warning {
      box-shadow: 2px -2px 0 0 @border-color-warning;
    }

    .arrow.arrow_error {
      box-shadow: 2px -2px 0 0 @border-color-error;
    }
  }
}
