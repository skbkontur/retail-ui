/* @flow */
import type { MenuItemState } from '../MenuItem';

export type ComboBoxItem = {
  value: string | number;
  label: string;
};

export type ComboBoxProps<T = ComboBoxItem> = {|
  align?: 'left' | 'center' | 'right',
  autocomplete?: boolean,
  autoFocus?: boolean,
  borderless?: boolean,
  disablePortal?: boolean,
  disabled?: boolean,
  error?: boolean,
  getItems?: (query: string) => Promise<T[]>,
  itemToValue?: (item: T) => string | number,
  maxLength?: number,
  menuAlign?: 'left' | 'right',
  onBlur?: () => void,
  onChange?: (
    event: {
      target: {
        value: T,
      },
    },
    item: T,
  ) => void,
  onFocus?: () => void,
  // eslint-disable-next-line flowtype/no-weak-types
  onInputChange?: (query: string) => any,
  onUnexpectedInput?: (query: string) => void | null | T,
  placeholder?: string,
  renderItem?: (item: T, state?: MenuItemState) => React$Node,
  renderNotFound?: () => React$Node,
  renderTotalCount?: (found: number, total: number) => React$Node,
  renderValue?: (item: T) => React$Node,
  totalCount?: number,
  value?: ?T,
  valueToString?: (item: T) => string,
  size?: 'small' | 'medium' | 'large',
  warning?: boolean,
  width?: string | number,
  maxMenuHeight?: number | string,
|};

declare class ComboBox<T = ComboBoxItem> extends React$Component<ComboBoxProps<T>> {
  focus(): void;
  search(query?: string): void;
  open(): void;
  close(): void;
  selectInputText(): void;
  reset(): void;
}

export default ComboBox;
