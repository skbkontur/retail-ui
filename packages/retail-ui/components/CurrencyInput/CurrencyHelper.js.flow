/* @flow */
import type { CursorMap } from './CursorHelper';

export type DecimalFormattingOptions = {|
  fractionDigits?: ?number,
  thousandsDelimiter?: string,
  minusSign?: string,
|};

type DecimalFormattingOptionsInternal = {|
  fractionDigits: ?number,
  thousandsDelimiter: string,
  minusSign: string,
|};

export type FormattingInfo = {|
  raw: string,
  formatted: string,
  cursorMap: CursorMap,
|};

declare class CurrencyHelper {
  static defaultOptions: DecimalFormattingOptionsInternal;
  static getOptions(options?: ?DecimalFormattingOptions): DecimalFormattingOptionsInternal;
  static getInfo(value: string, options?: ?DecimalFormattingOptions): FormattingInfo;
  static getCursorMap(formatted: string, formattingOptions?: ?DecimalFormattingOptions): CursorMap;
  static format(value: ?number, options?: ?DecimalFormattingOptions): string;
  static parse(value: string): ?number;
  static unformatString(value: string): string;
  static formatForClipboard(value: string): string;
  static formatString(value: string, formattingOptions?: ?DecimalFormattingOptions): string;
  static isValidString(value: string, fractionDigits: ?number, unsigned?: ?boolean): boolean;
  static extractValid(value: string, fractionDigits: ?number, unsigned: ?boolean): string;
  static destructString(
    value: string,
  ): {
    sign: string,
    integer: string,
    delimiter: string,
    fraction: string,
  } | null;
}

export default CurrencyHelper;
