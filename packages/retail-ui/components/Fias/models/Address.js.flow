/* @flow */
import type { AddressErrors, AddressFields, AddressResponse, AddressValue, FiasValue, Fields } from '../types';

declare export class Address {
  static ALL_FIELDS: Fields[],
  static VERIFIABLE_FIELDS: Fields[],
  static FULL_ADDRESS_SEARCH_FIELDS: Fields[],
  static ALL_PARENTS_SEARCH_FIELDS: Fields[],
  static createFromResponse: (response: AddressResponse) => Address,
  static createFromAddressValue: (addressValue: AddressValue) => Address,
  static verify: (address: Address, response: {|
    address: AddressResponse,
    isValid: boolean,
    invalidLevel?: string | void,
  |}[], notVerifiedMessage: string) => Address,
  static getParentFields: (field: Fields) => Fields[],

  +isEmpty: boolean,
  +hasErrors: boolean,

  fields: AddressFields,
  errors: AddressErrors,

  hasError(field: Fields): boolean,
  getError(field: Fields): string | void,
  getAddressErrors: () => {|
    region?: string | void,
    district?: string | void,
    city?: string | void,
    intracityarea?: string | void,
    settlement?: string | void,
    planningstructure?: string | void,
    street?: string | void,
    stead?: string | void,
    house?: string | void,
    room?: string | void,
  |},
  getText: (minField?: Fields | void, skipTypes?: boolean, connector?: string) => string,
  isAllowedToFill: (field: ?Fields) => boolean,
  isAllowedToSearchFullAddress: (field?: Fields | void) => boolean,
  isAllowedToSearchThroughAllParents: (field?: Fields | void) => boolean,
  hasOnlyIndirectParent: (field: ?Fields) => boolean,
  getClosestParentFiasId: (field?: Fields | void) => string | void,
  getFiasId: () => string,
  getAddressValue: () => AddressValue,
  getValue: () => FiasValue,
  convertForVerification: () => {},
}

export default Address;
