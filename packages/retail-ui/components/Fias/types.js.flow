/* @flow */
import type { AddressElement } from './models/AddressElement';
import { defaultLocale } from './constants/locale';

export type FiasId = string;

export type FiasEntity = {|
  id: string,
  fiasId: FiasId,
  parentFiasId?: FiasId,
|};

export type AddressObject = {|
  ...$Exact<FiasEntity>,
  name: string,
  abbreviation: string,
  code: string,
|};

export type Stead = {|
  ...$Exact<FiasEntity>,
  number: string,
  liveStatus: LiveStatuses,
|};

export type House = {|
  ...$Exact<FiasEntity>,
  estateStatus: EstateStatuses,
  structureStatus: StructureStatuses,
  number?: string,
  structureNumber?: string,
  buildingNumber?: string,
|};

export type Room = {|
  ...$Exact<FiasEntity>,
  flatNumber: string,
  flatType: number,
  liveStatus: LiveStatuses,
|};

export type EstateStatuses = "Hold" | "House" | "HouseHold" | "None";

export type StructureStatuses = "Structure" | "Construction" | "Liter" | "None";

export type LiveStatuses = "active" | "inactive";

export type FiasObject = AddressObject | Stead | House | Room;

export type Fields = "region" | "district" | "city" | "intracityarea" | "settlement" | "planningstructure" | "street" | "stead" | "house" | "room";

export type AddressFields = {
  [key: Fields]: ?AddressElement,
};

export type FiasValue = {|
  address?: AddressValue,
  addressString?: string,
  addressErrors?: AddressErrors,
  fiasId?: FiasId,
|};

export type AddressValue = {|
  [key: Fields]: void | {|
    name: string,
    data?: FiasObject,
  |},
|};

export type AddressResponse = {|
  [key: Fields]: void | FiasObject,
|};

export type SearchResponse = AddressResponse[];

export type VerifyResponse = Array<{|
  address: AddressResponse,
  isValid: boolean,
  invalidLevel?: string,
|}>;

export type AddressErrors = {
  [key: Fields]: void | string,
};

export type FormValidation = 'Error' | 'Warning' | 'None';

export type FiasLocale = typeof defaultLocale;

export type SearchOptions = {|
  fiasId?: FiasId,
  searchText?: string,
  field?: Fields,
  parentFiasId?: FiasId,
  limit?: number,
  fullAddress?: boolean,
  directParent?: boolean,
|};

export type APIProvider = {|
  search: (options: SearchOptions) => Promise<APIResult<SearchResponse>>,
  verify: (address: AddressValue) => Promise<APIResult<VerifyResponse>>,
|};

export type APIResult<Data> = {|
  success: boolean,
  data?: Data,
  error?: Error,
|};

export type FetchFn = (uri: string, options: {|
  method?: 'GET' | 'POST',
  body?: string,
|}) => Promise<FetchResponse>;

export type FetchResponse = {|
  ok: boolean,
  status: number,
  statusText: string,
  // eslint-disable-next-line flowtype/no-weak-types
  json: () => Promise<any>,
|};
