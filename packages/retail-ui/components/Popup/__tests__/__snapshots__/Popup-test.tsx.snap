// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Popup snapshots:  open and close popup: closed popup 1`] = `
<Popup
  anchorElement={
    <button
      id="test-id"
    >
      test
    </button>
  }
  disableAnimations={false}
  hasPin={false}
  hasShadow={false}
  margin={10}
  maxWidth={500}
  opened={false}
  pinOffset={16}
  pinSize={8}
  popupOffset={0}
  positions={
    Array [
      "bottom left",
      "bottom right",
      "top left",
      "top right",
    ]
  }
  useWrapper={false}
>
  <RenderContainer
    anchor={null}
  >
    <RenderInnerContainer
      anchor={null}
      domContainer={null}
      rootId={1}
    />
  </RenderContainer>
</Popup>
`;

exports[`Popup snapshots:  open and close popup: closed popup again 1`] = `
<Popup
  anchorElement={
    <button
      id="test-id"
    >
      test
    </button>
  }
  disableAnimations={false}
  hasPin={false}
  hasShadow={false}
  margin={10}
  maxWidth={500}
  opened={false}
  pinOffset={16}
  pinSize={8}
  popupOffset={0}
  positions={
    Array [
      "bottom left",
      "bottom right",
      "top left",
      "top right",
    ]
  }
  useWrapper={false}
>
  <RenderContainer
    anchor={null}
  >
    <RenderInnerContainer
      anchor={null}
      domContainer={
        <div
          class="react-ui"
          data-rendered-container-id="1"
        />
      }
      rootId={1}
    />
  </RenderContainer>
</Popup>
`;

exports[`Popup snapshots:  open and close popup: opened popup 1`] = `
<Popup
  anchorElement={
    <button
      id="test-id"
    >
      test
    </button>
  }
  disableAnimations={false}
  hasPin={false}
  hasShadow={false}
  margin={10}
  maxWidth={500}
  opened={true}
  pinOffset={16}
  pinSize={8}
  popupOffset={0}
  positions={
    Array [
      "bottom left",
      "bottom right",
      "top left",
      "top right",
    ]
  }
  useWrapper={false}
>
  <RenderContainer
    anchor={null}
  >
    <RenderInnerContainer
      anchor={null}
      domContainer={
        <div
          class="react-ui"
          data-rendered-container-id="1"
        >
          <div
            class="popup transition-enter-active transition-enter-bottom"
            style="top: 10px; left: 0px; max-width: 500px; z-index: 1000;"
          >
            <div
              class="content"
            >
              <div
                class="contentInner"
              >
                Test content
              </div>
            </div>
          </div>
        </div>
      }
      rootId={1}
    >
      <LifeCycleProxy
        onDidUpdate={[Function]}
        props={
          Object {
            "location": null,
          }
        }
      >
        <Transition
          appear={true}
          enter={true}
          exit={true}
          in={true}
          mountOnEnter={true}
          onEnter={[Function]}
          onEntered={[Function]}
          onEntering={[Function]}
          onExit={[Function]}
          onExited={[Function]}
          onExiting={[Function]}
          timeout={
            Object {
              "enter": 0,
              "exit": 200,
            }
          }
          unmountOnExit={true}
        >
          <ZIndex
            className="popup transition-enter-top"
            delta={1000}
            key="dummy"
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            render={true}
            style={
              Object {
                "left": -9999,
                "maxWidth": 500,
                "top": -9999,
              }
            }
          >
            <div
              className="popup transition-enter-top"
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              style={
                Object {
                  "left": -9999,
                  "maxWidth": 500,
                  "top": -9999,
                  "zIndex": 1000,
                }
              }
            >
              <div
                className="content"
              >
                <div
                  className="contentInner"
                  style={
                    Object {
                      "backgroundColor": undefined,
                    }
                  }
                >
                  Test content
                </div>
              </div>
            </div>
          </ZIndex>
        </Transition>
      </LifeCycleProxy>
      <Portal
        key="portal-ref"
        rt_rootID={1}
      >
        <noscript
          data-render-container-id={1}
        />
      </Portal>
    </RenderInnerContainer>
  </RenderContainer>
</Popup>
`;
