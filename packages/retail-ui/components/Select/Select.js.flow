/* @flow */
import * as CSS from 'csstype';

import Item from './Item';
import type { FocusEventHandler } from '../eventHandlers';
import type { ButtonUse, ButtonSize } from '../Button/Button';

export type ButtonParams = {|
  disabled?: boolean,
  label: React$Node,
  onClick: () => void,
  onKeyDown: (event: SyntheticKeyboardEvent<HTMLElement>) => void,
  opened: boolean,
  isPlaceholder: boolean,
|};

export type SelectProps<TValue, TItem> = {|
  // eslint-disable-next-line flowtype/no-weak-types
  _icon?: React$Element<any>,
  _renderButton?: (params: ButtonParams) => React$Node,
  defaultValue?: TValue,
  // eslint-disable-next-line flowtype/no-weak-types
  diadocLinkIcon?: React$Element<any>,
  disablePortal?: boolean,
  disabled?: boolean,
  error?: boolean,
  filterItem?: (value: TValue, item: TItem, pattern: string) => boolean,
  // eslint-disable-next-line flowtype/no-weak-types
  items?: Array<[TValue, TItem] | TItem | React$Element<any> | (() => React$Element<any>)>,
  maxMenuHeight?: number,
  maxWidth?: CSS.MaxWidthProperty<string | number>,
  menuAlign?: 'left' | 'right',
  menuWidth?: CSS.WidthProperty<string | number>,
  onChange?: (e: {|
    target: {|
      value: TValue,
    |},
  |}, value: TValue) => void,
  onClose?: () => void,
  onMouseEnter?: (e: SyntheticMouseEvent<HTMLElement>) => void,
  onMouseLeave?: (e: SyntheticMouseEvent<HTMLElement>) => void,
  onMouseOver?: (e: SyntheticMouseEvent<HTMLElement>) => void,
  onOpen?: () => void,
  placeholder?: React$Node,
  renderItem?: (value: TValue, item?: TItem) => React$Node,
  renderValue?: (value: TValue, item?: TItem) => React$Node,
  areValuesEqual?: (value1: TValue, value2: TValue) => boolean,
  search?: boolean,
  value?: TValue,
  width?: number | string,
  warning?: boolean,
  use?: ButtonUse,
  size?: ButtonSize,
  onFocus?: FocusEventHandler<HTMLElement>,
  onBlur?: FocusEventHandler<HTMLElement>,
|};

export type SelectState<TValue> = {|
  opened: boolean,
  searchPattern?: string,
  value: ?TValue,
|};

declare class Select<TValue = {}, TItem = {}> extends React$Component<SelectProps<TValue, TItem>, SelectState<TValue>> {
  static Item: typeof Item,
  static SEP: () => React$Node,
  // eslint-disable-next-line flowtype/no-weak-types
  static static: (element: string | number | boolean | {} | React$Element<any> | React$Node | React$Portal | (() => React$Node) | null | void) => {} | null | void,
  open: () => void,
  close: () => void,
  focus(): void,
}

/* eslint-disable flowtype/no-weak-types */
declare function renderValue(value: any, item: any): any;
declare function renderItem(value: any, item: any): any;
declare function areValuesEqual(value1: any, value2: any): boolean;
declare function filterItem(value: any, item: any, pattern: string): boolean;
/* eslint-enable flowtype/no-weak-types */

export default Select;
