/* @flow */
import type { TokenProps } from '../Token';
import type { MenuItemState } from '../MenuItem';

export type TokenInputType = 0 | 1 | 2;

export type TokenInputProps<T> = {|
  selectedItems: T[],
  onChange: (items: T[]) => void,
  autoFocus?: boolean,
  type?: TokenInputType,
  getItems?: (query: string) => Promise<T[]>,
  hideMenuIfEmptyInputValue?: boolean,
  renderItem: (item: T, state: MenuItemState) => React$Node | void,
  renderValue: (item: T) => React$Node,
  renderNotFound: () => React$Node,
  valueToItem: (item: string) => T,
  placeholder?: string,
  delimiters?: string[],
  error?: boolean,
  warning?: boolean,
  disabled?: boolean,
  width: string | number,
  renderTokenComponent?: (token: (props?: $Shape<TokenProps>) => React$Node, value?: T) => React$Node,
|};

export type TokenInputState<T> = {|
  autocompleteItems?: T[],
  activeTokens: T[],
  inFocus?: boolean,
  inputValue: string,
  inputValueWidth: number,
  preventBlur?: boolean,
  loading?: boolean,
|};

declare class TokenInput<T = string> extends React$Component<TokenInputProps<T>, TokenInputState<T>> {}

export default TokenInput;
